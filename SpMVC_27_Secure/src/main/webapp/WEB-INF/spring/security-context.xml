<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans-4.3.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/security https://www.springframework.org/schema/security/spring-security-5.2.xsd">

	<!-- spring security project 핵심 context file -->
	<!-- 여기에 security 설정과 관련된 내용 작성 -->
	<!-- 암호화 설정을 사용하기 위한 bean 설정 -->
	
	<!-- controller, service가 아닌 최초 인증과정에서 사용할 bean -->
	<!-- 생성자에 암호화 반복 횟수 설정 
		 기본 값은 4이므로 4일경우는 생략해도 된다
		 편의성 4일 경우도 값을 설정해주자
		 
		 이 횟수가 크면 클수록 암호화 정도가 깊어지는데
		 너무 크면 프로젝트 실행시간이 과도하게 길어지는 현상이 발생한다
	-->
	<bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder">
		<constructor-arg index="0" value="4"/>
	</bean>

	<!-- login을 수행할 때 suer DB로부터 사용자 정보 가져오기 설정 -->
	<bean id="securDao" class="org.springframework.security.core.userdetails.jdbc.JdbcDaoImpl">
		<property name="dataSource" ref="authDB"/>
		<property name="usersByUsernameQuery">
			<value>
				SELECT	user_name AS username, 
				user_pass AS password, enabled
				FROM 	tbl_users 
				WHERE	user_name = ?
			</value>
		</property>
		<property name="authoritiesByUsernameQuery">
			<value>
				SELECT 	username, authority
				FROM 	authorities
				WHERE 	username=?
			</value>
		</property>
	</bean>
	
	<!-- 사용자 login을 검증하는 클래스 -->
	<security:authentication-manager>
		<security:authentication-provider user-service-ref="securDao">
			<security:password-encoder ref="passwordEncoder"/>
		</security:authentication-provider>	
	</security:authentication-manager>	
	
	<!-- 
	사용자 인증시 login form과 연동하기 위한 설정
	
	<security:csrf disabled="false"/>
	POST방식으로 서버에 데이터를 전송할 때
	반드시 서버가 제공한 인증관련 token을 포함해라라는 설정
	
		<security:logout logout-url="/logout"/>
		logout 기능을 별도로 만들지 않고
		spring security가 제공하는 logout 기능을 사용하겠다
		임의로 logout기능을 만드려면 logout-url에 설정을 바꾸면된다
	
	<security:http auto-config="true" use-expressions="true">
		auto-config="true" : form 기반 로그인, 기본 인증 기본 로그인 할성화
		 use-expressions="true" : 함수기반 표현식을 사용할 수 있다
	-->
	
	<security:http auto-config="true" use-expressions="true">
		<security:csrf disabled="false"/>
		
		<security:intercept-url pattern="/admin/**" access="hasRole('admin')"/>
		
		<security:intercept-url pattern="/user/mypage" access="hasAnyRole('admin','user')"/>
		
		<security:intercept-url pattern="/user/password" access="hasAnyRole('admin','user')"/>
		
		<security:intercept-url pattern="/**" access="permitAll()"/>
		
		<security:form-login 
			login-page="/login"
			login-processing-url=""
			default-target-url=""
			username-parameter="username"
			password-parameter="password"
		/>	
		<security:logout
			logout-url="/logout"
			invalidate-session="true"
			logout-success-url=""
		/>
	</security:http>
</beans>











