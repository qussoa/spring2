<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans-4.3.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/security https://www.springframework.org/schema/security/spring-security-5.2.xsd">

	<!-- security message 커스터마이징

	<bean id="messageSource"
		class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<property name="basename">
			<list>
				<value>/WEB-INF/spring/properties/spring-security.message.ko.properties</value>
			</list>
		</property>
		<property name="defaultEncoding" value="UTF-8" />
		<property name="cacheSeconds" value="5" />
	</bean>

 -->
	<!-- security 설정 -->

	<bean id="passwordEncoder"
		class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder">
		<constructor-arg index="0" value="4" />
	</bean>

	<!-- login 수행시 user DB로부터 사용자 정보 가져오기 -->
	<bean id="secureDao"
		class="org.springframework.security.core.userdetails.jdbc.JdbcDaoImpl">
		<property name="dataSource" ref="authDB" />
		<property name="usersByUsernameQuery">
			<value>
				SELECT user_name AS,
				user_pass AS password,
				enabled
				FROM tbl_users WHERE user_name=?
			</value>
		</property>
		<property name="authoritiesByUsernameQuery">
			<value>
				SELECT username, authority
				FROM authorities
				WHERE username=?
			</value>
		</property>
	</bean>
	
	<context:component-scan base-package="com.biz.shop.service.auth"/>
	<bean id="authProvider" class="com.biz.shop.service.auth.AuthProviderImpl">
	</bean>

	<!-- 
		hasRole()에서 ROLE_USER와 USER의 값 검사
		security 4.2 미만에서는
		반드시 DB에 ROLE_USER라고 저장되어 있으면
		hasRole('ROLE_USER') 이라고 검사를 해야한다
		
		4.2이상에서는 선택적으로 변경이 된다
		DB에 ROLE_USER라고 저장되어 있을때
		검사할때는 hasRole('USER')라고만 검사를 해도 통과가 됨
		간혹 이 규칙이 적용이 안되는 버전이 있다
		
		편의상 DB에 ROLE_USER, USER를 같이 등록을 해 놓는다
		
		이러한 문제를 해결하기 위해 4.2이상에서는 bean을 하나 
		설정하여 DB에 ROLE_USER라고 저장되어 있어도 
		hasRole('USER')라고 검사하도록 강제로 적용할 수 있다
		
	 -->
	 
	 <bean id="grantedAuthorityDefaults"  class="org.springframework.security.config.core.GrantedAuthorityDefaults">
	 	<constructor-arg value="ROLE_"/>
	 </bean>
	

	<!-- 사용자 login 검증 -->
	<security:authentication-manager>
		<security:authentication-provider ref="authProvider"/>
	</security:authentication-manager>
	
	<!-- 권한 -->
	<security:http auto-config="true" use-expressions="true">
		<security:csrf disabled="false"/>
		
		<security:intercept-url
			pattern="/admin/**"
			access="hasRole('ADMIN')"
		/>
		<security:intercept-url
			pattern="/user/mypage"
			access="hasAnyRole('ADMIN','USER')"
		/>
		<security:intercept-url
			pattern="/user/password"
			access="hasAnyRole('ADMIN','USER')"
		/>
		<security:intercept-url
			pattern="/user/**"
			access="permitAll()"
		/>
		<security:intercept-url
			pattern="/**"
			access="permitAll()"
		/>
		
		<security:form-login
			login-page="/user/login"
			login-processing-url=""
			default-target-url=""
			username-parameter="username"
			password-parameter="password"
		/>
		
	
		<security:logout
			logout-url="/logout"
			invalidate-session="true"
			delete-cookies="true"
			logout-success-url="/"
		/>
	</security:http>
</beans>









